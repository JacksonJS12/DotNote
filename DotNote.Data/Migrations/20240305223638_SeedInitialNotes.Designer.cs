// <auto-generated />
using System;
using DotNote.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DotNote.Data.Migrations
{
    [DbContext(typeof(DotNoteDbContext))]
    [Migration("20240305223638_SeedInitialNotes")]
    partial class SeedInitialNotes
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("DotNote.Data.Models.Folder", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Folders");
                });

            modelBuilder.Entity("DotNote.Data.Models.Note", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("FolderId")
                        .HasColumnType("char(36)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(true);

                    b.Property<string>("Subtitle")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("FolderId");

                    b.HasIndex("UserId");

                    b.ToTable("Notes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("5dda0193-8a3b-4de2-8d73-bc656a654a4c"),
                            CreatedAt = new DateTime(2024, 3, 5, 22, 36, 37, 791, DateTimeKind.Utc).AddTicks(2273),
                            IsActive = true,
                            Subtitle = "This is the subtitle for the first note",
                            Text = "This is the content of the first note.",
                            Title = "First Note",
                            UserId = new Guid("442f7e99-7581-42c1-9a4e-890e69ff1b9b")
                        },
                        new
                        {
                            Id = new Guid("114065b3-438d-4645-8a31-9047c7e38e79"),
                            CreatedAt = new DateTime(2024, 3, 5, 22, 36, 37, 791, DateTimeKind.Utc).AddTicks(2294),
                            IsActive = true,
                            Subtitle = "This is the subtitle for the second note",
                            Text = "This is the content of the second note.",
                            Title = "Second Note",
                            UserId = new Guid("442f7e99-7581-42c1-9a4e-890e69ff1b9b")
                        },
                        new
                        {
                            Id = new Guid("2ad10056-a064-4374-a6e6-3c55e938262b"),
                            CreatedAt = new DateTime(2024, 3, 5, 22, 36, 37, 791, DateTimeKind.Utc).AddTicks(2298),
                            IsActive = true,
                            Subtitle = "This is the subtitle for the third note",
                            Text = "This is the content of the third note.",
                            Title = "Third Note",
                            UserId = new Guid("442f7e99-7581-42c1-9a4e-890e69ff1b9b")
                        });
                });

            modelBuilder.Entity("DotNote.Data.Models.Update", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Updates");
                });

            modelBuilder.Entity("DotNote.Data.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("longtext");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("longtext");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("User");
                });

            modelBuilder.Entity("DotNote.Data.Models.Folder", b =>
                {
                    b.HasOne("DotNote.Data.Models.User", "User")
                        .WithMany("Folders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("DotNote.Data.Models.Note", b =>
                {
                    b.HasOne("DotNote.Data.Models.Folder", null)
                        .WithMany("Notes")
                        .HasForeignKey("FolderId");

                    b.HasOne("DotNote.Data.Models.User", "User")
                        .WithMany("Notes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("DotNote.Data.Models.Folder", b =>
                {
                    b.Navigation("Notes");
                });

            modelBuilder.Entity("DotNote.Data.Models.User", b =>
                {
                    b.Navigation("Folders");

                    b.Navigation("Notes");
                });
#pragma warning restore 612, 618
        }
    }
}
